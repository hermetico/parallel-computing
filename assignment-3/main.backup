#include <mpi.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>


#include "comm.h"
#include "matrix.h"

inline int min(int a, int b) { return a < b ? a : b; }
inline int max(int a, int b) { return a > b ? a : b; }

void print_mat(int m, int n, double* a)
{
	for (int row = 0; row < m; row++)
	{
		for(int col = 0; col < n; col++)
			printf("%f	 ", a[row+col*m]);
		printf("\n");
	}
}

/* Print a header for results output */
void results_header()
{
	printf("Dims  No. Proc.  Avg. RT / Dev. (Eff.)\n");
}

/* Print the stats for 1 run */
void write_result(int full_dim, int procs, double rt, double dev, double eff)
{
	printf("%-5i %-10i %-5.5f / %-5.5f (%-5.5f)\n", full_dim, procs, rt, dev, eff);
}

/* Average and standard deviation */
double average(int count, double *list, double *dev)
{
	int i;
	double sum = 0.0, avg;

	for (i = 0; i < count; i++)
	{
		sum += list[i];
	}

	avg = sum/(double)count;

	if (dev != 0)
	{
		sum = 0.0;
		for (i = 0; i < count; i++)
		{
			sum += (list[i] - avg)*(list[i] - avg);
		}

		*dev = sqrt(sum/(double)count);
	}

	return avg;
}

static void core_dummy(int m, int n, int k, double* A, double* B, double* C)
{
	double cij;
	/* For each row i of A */
	for (int i = 0; i < m; ++i)
		/* For each column j of B */
		for (int j = 0; j < n; ++j)
		{
			cij = 0;
			/* Compute C(i,j) */
			for (int l = 0; l < k; ++l)
				cij += A[i + l * m] * B[l + j * k];
			C[i + j * m] = cij;
		}
}


int main(int argc, char **argv)
{
	/* Statistics */
	double startTime = 0.0, endTime = 0.0, avg, dev; /* Timing */
	double times[10]; /* Times for all runs */

	MPI_Init(&argc, &argv);

	/* Get MPI process stats */
	int rank, p, q, n;

	MPI_Comm_rank(MPI_COMM_WORLD, &rank);

	/* Get parameters */
	if (argc == 3)
	{
		/* Get number of processes */
		p = atoi(argv[1]);
		q = pow(p, 1/3.);

		/* Get maximum matrix dimension */
		n = atoi(argv[2]);
		if(rank == 0){
			printf("q= %i\n",q);
			printf("n= %i\n",n);
		}
	}
	else
	{
		printf("Wrong number of parameters\n");
		exit(-1);
	}


	//
	// Create virtual topology and compute coordinates
	//
	int coords[3], cube_rank,
		dims = 3,
		periods[3] = {0,0,0},  /* for wrap around? */
		ndims[3]; // size of each dimension

	for(int i = 0; i < 3; i++)
		ndims[i] = q;

	MPI_Comm cube_comm;   // required variable
	MPI_Cart_create(MPI_COMM_WORLD, dims, ndims, periods, 0, &cube_comm);
	MPI_Comm_rank(cube_comm, &cube_rank);
	MPI_Cart_coords(cube_comm, cube_rank, 3, coords);

	//printf("rank=%i of %i with cube_rank of %d and coords i=%i, j=%i, k=%i\n", rank,p, cube_rank, coords[0], coords[1], coords[2]);


	//
	// Split communicators
	//
	MPI_Comm comm_i, comm_j, comm_k, comm_k0;
	comms_split(&comm_i, &comm_j, &comm_k, &comm_k0, coords, q);

	int rank_i, rank_j, rank_k;
	MPI_Comm_rank(comm_i, &rank_i);
	MPI_Comm_rank(comm_j, &rank_j);
	MPI_Comm_rank(comm_k, &rank_k);

	MPI_Status status;

	/* Make full matrices */
	double* GA;
	double* GB;


	if (rank == 0)
	{
		GA = (double*) malloc(n * n * sizeof(double));
		GB = (double*) malloc(n * n * sizeof(double));

		make_full_matrices(GA, GB, n);

		//for(int i = 0; i < n * n; ++i)
		//	printf("A : %lf B: %lf\n", A[i], B[i]);

	}

	//
	// Distribute initial matrices along K0
	//

	if(coords[2] == 0) {

		int I,  // number of rows of A and B
			J;  // number of cols of A and B

		I = q - (coords[1] % q);
		J = q - (coords[0] % q);

		printf("Process : %i %i i's= %i, j's= %i \n",rank_i, rank_j,  I, J);
		double *sendbuf, *A, *B;

		A = (double*) malloc(I * J * sizeof(double));
		B = (double*) malloc(I * J * sizeof(double));

		int *sendcounts, *displs;
	}

	//
	if(rank == 0) {
		free(GA);
		free(GB);
	}
	//free(C);
	/* Exit program */
	MPI_Finalize();

	return 0;
}